<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MSProfessionals.API</name>
    </assembly>
    <members>
        <member name="T:MSProfessionals.API.Controllers.CountryCodesController">
            <summary>
            Controller for managing country codes
            </summary>
        </member>
        <member name="M:MSProfessionals.API.Controllers.CountryCodesController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the CountryCodesController
            </summary>
            <param name="mediator">Mediator for handling commands</param>
        </member>
        <member name="M:MSProfessionals.API.Controllers.CountryCodesController.GetCountryCodes(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of country codes
            </summary>
            <param name="pageNumber">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 10)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of country codes</returns>
        </member>
        <member name="M:MSProfessionals.API.Controllers.CountryCodesController.GetCountryCodesByCountryName(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of country codes filtered by country name
            </summary>
            <param name="countryName">Country name to filter by</param>
            <param name="pageNumber">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 10)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of filtered country codes</returns>
        </member>
        <member name="T:MSProfessionals.API.Controllers.CurrenciesController">
            <summary>
            Controller for managing currencies
            </summary>
        </member>
        <member name="M:MSProfessionals.API.Controllers.CurrenciesController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the CurrenciesController
            </summary>
            <param name="mediator">Mediator for handling commands</param>
        </member>
        <member name="M:MSProfessionals.API.Controllers.CurrenciesController.GetCurrencies(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of currencies ordered by description
            </summary>
            <param name="pageNumber">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 10)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of currencies</returns>
        </member>
        <member name="M:MSProfessionals.API.Controllers.CurrenciesController.GetCurrenciesByDescription(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of currencies filtered by description
            </summary>
            <param name="description">Description to filter by</param>
            <param name="pageNumber">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 10)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of filtered currencies</returns>
        </member>
        <member name="T:MSProfessionals.API.Controllers.LanguagesController">
            <summary>
            Controller for managing languages
            </summary>
        </member>
        <member name="M:MSProfessionals.API.Controllers.LanguagesController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the LanguagesController
            </summary>
            <param name="mediator">Mediator for handling commands</param>
        </member>
        <member name="M:MSProfessionals.API.Controllers.LanguagesController.GetLanguages(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of languages ordered by description
            </summary>
            <param name="pageNumber">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 10)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of languages</returns>
        </member>
        <member name="M:MSProfessionals.API.Controllers.LanguagesController.GetLanguagesByDescription(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of languages filtered by description
            </summary>
            <param name="description">Description to filter by</param>
            <param name="pageNumber">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 10)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of filtered languages</returns>
        </member>
        <member name="T:MSProfessionals.API.Controllers.ProfessionalAddressController">
            <summary>
            Controller for managing professional addresses
            </summary>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalAddressController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the ProfessionalAddressController
            </summary>
            <param name="mediator">Mediator for command processing</param>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalAddressController.Create(MSProfessionals.Application.Commands.ProfessionalAddress.CreateProfessionalAddressCommand)">
            <summary>
            Creates a new professional address
            </summary>
            <param name="command">Professional address data</param>
            <returns>The created professional address</returns>
            <response code="201">Returns the newly created professional address</response>
            <response code="400">If the professional address data is invalid</response>
            <response code="404">If the professional or country is not found</response>
            <response code="500">If an internal error occurs</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalAddressController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets a professional address by ID
            </summary>
            <param name="id">Professional address ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The found professional address</returns>
            <response code="200">Returns the found professional address</response>
            <response code="404">If the professional address is not found</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalAddressController.GetByProfessionalId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets all addresses for a professional
            </summary>
            <param name="professionalId">Professional ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of professional addresses</returns>
            <response code="200">Returns the list of addresses</response>
            <response code="404">If the professional is not found</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalAddressController.Update(MSProfessionals.Application.Commands.ProfessionalAddress.UpdateProfessionalAddressCommand,System.Threading.CancellationToken)">
            <summary>
            Updates a professional address
            </summary>
            <param name="command">Professional address data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The updated professional address</returns>
            <response code="200">Returns the updated professional address</response>
            <response code="400">If the professional address data is invalid</response>
            <response code="404">If the professional address or country is not found</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalAddressController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Deletes a professional address
            </summary>
            <param name="id">Professional address ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>No content</returns>
            <response code="204">If the professional address was successfully deleted</response>
            <response code="404">If the professional address is not found</response>
            <response code="400">If the professional address cannot be deleted due to constraints</response>
        </member>
        <member name="T:MSProfessionals.API.Controllers.ProfessionalsController">
            <summary>
            Controller for professionals
            </summary>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalsController.#ctor(MediatR.IMediator,Microsoft.Extensions.Logging.ILogger{MSProfessionals.API.Controllers.ProfessionalsController})">
            <summary>
            Initializes a new instance of the ProfessionalsController
            </summary>
            <param name="mediator">Mediator for command processing</param>
            <param name="logger">Logger</param>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalsController.Create(MSProfessionals.Application.Commands.Professional.CreateProfessionalCommand,System.Threading.CancellationToken)">
            <summary>
            Creates a new professional
            </summary>
            <param name="command">Create professional command</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The created professional</returns>
            <response code="201">Returns the newly created professional</response>
            <response code="400">If the professional data is invalid</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalsController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets a professional by ID
            </summary>
            <param name="id">Professional ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The professional if found</returns>
            <response code="200">Returns the professional</response>
            <response code="404">If the professional is not found</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalsController.GetByName(System.String)">
            <summary>
            Gets a professional by name
            </summary>
            <param name="name">Professional name</param>
            <returns>The found professional</returns>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalsController.Update(System.Guid,MSProfessionals.Application.Commands.Professional.UpdateProfessionalCommand,System.Threading.CancellationToken)">
            <summary>
            Updates an existing professional
            </summary>
            <param name="id">Professional ID</param>
            <param name="command">Update professional command</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The updated professional</returns>
            <response code="200">Returns the updated professional</response>
            <response code="400">If the professional data is invalid</response>
            <response code="404">If the professional is not found</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalsController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Deletes a professional
            </summary>
            <param name="id">Professional ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>No content</returns>
            <response code="204">If the professional was successfully deleted</response>
            <response code="404">If the professional is not found</response>
            <response code="400">If the professional cannot be deleted due to constraints</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalsController.CreateProfession(MSProfessionals.Application.Commands.Professional.CreateProfessionCommand,System.Threading.CancellationToken)">
            <summary>
            Creates a profession for a professional
            </summary>
            <param name="command">Create profession command</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The created profession</returns>
            <response code="201">Returns the newly created profession</response>
            <response code="400">If the profession data is invalid</response>
            <response code="404">If the professional or profession is not found</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalsController.DeleteProfession(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Deletes a professional profession
            </summary>
            <param name="id">Professional profession ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>No content</returns>
            <response code="204">If the professional profession was successfully deleted</response>
            <response code="404">If the professional profession is not found</response>
            <response code="400">If the professional profession cannot be deleted due to constraints</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalsController.GetProfessionalProfessions(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets all professions for a professional
            </summary>
            <param name="professionalId">Professional ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of professional professions</returns>
            <response code="200">Returns the list of professions</response>
            <response code="404">If the professional is not found</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalsController.GetProfessionals(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all professionals with pagination, ordered by name
            </summary>
            <param name="pageNumber">Page number (1-based)</param>
            <param name="pageSize">Page size</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of professionals</returns>
            <response code="200">Returns the paginated list of professionals</response>
            <response code="400">If the page number or size is invalid</response>
        </member>
        <member name="T:MSProfessionals.API.Controllers.ProfessionalServiceController">
            <summary>
            Controller for professional services
            </summary>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalServiceController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the ProfessionalServiceController
            </summary>
            <param name="mediator">Mediator for command processing</param>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalServiceController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets a professional service by ID
            </summary>
            <param name="id">Professional service ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The professional service if found</returns>
            <response code="200">Returns the professional service</response>
            <response code="404">If the professional service is not found</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalServiceController.GetByProfessionalId(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets all services for a professional
            </summary>
            <param name="professionalId">Professional ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of professional services</returns>
            <response code="200">Returns the list of services</response>
            <response code="404">If the professional is not found</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalServiceController.Add(MSProfessionals.Application.Commands.ProfessionalService.AddProfessionalServiceCommand,System.Threading.CancellationToken)">
            <summary>
            Adds a new professional service
            </summary>
            <param name="command">Add professional service command</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The added professional service</returns>
            <response code="201">Returns the newly created professional service</response>
            <response code="400">If the professional service data is invalid</response>
            <response code="404">If the professional, profession, or service is not found</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalServiceController.Update(System.Guid,MSProfessionals.Application.Commands.ProfessionalService.UpdateProfessionalServiceCommand,System.Threading.CancellationToken)">
            <summary>
            Updates an existing professional service
            </summary>
            <param name="id">Professional service ID</param>
            <param name="command">Update professional service command</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The updated professional service</returns>
            <response code="200">Returns the updated professional service</response>
            <response code="400">If the professional service data is invalid</response>
            <response code="404">If the professional service, profession, or service is not found</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalServiceController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Deletes a professional service
            </summary>
            <param name="id">Professional service ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>No content</returns>
            <response code="204">If the professional service was successfully deleted</response>
            <response code="404">If the professional service is not found</response>
            <response code="400">If the professional service cannot be deleted due to constraints</response>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionalServiceController.AddMultiple(MSProfessionals.Application.Commands.ProfessionalService.AddMultipleProfessionalServicesCommand,System.Threading.CancellationToken)">
            <summary>
            Adds multiple professional services at once
            </summary>
            <param name="command">Add multiple professional services command</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The added professional services</returns>
            <response code="201">Returns the newly created professional services</response>
            <response code="400">If the professional services data is invalid</response>
            <response code="404">If the professional, profession, or service is not found</response>
        </member>
        <member name="T:MSProfessionals.API.Controllers.ProfessionController">
            <summary>
            Controller for managing professions
            </summary>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the ProfessionController
            </summary>
            <param name="mediator">Mediator</param>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ProfessionController.Get(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of professions
            </summary>
            <param name="pageNumber">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 10)</param>
            <param name="name">Optional name filter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of professions</returns>
            <response code="200">Returns the paginated list of professions</response>
        </member>
        <member name="T:MSProfessionals.API.Controllers.ServiceController">
            <summary>
            Controller for managing services
            </summary>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ServiceController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the ServiceController
            </summary>
            <param name="mediator">Mediator</param>
        </member>
        <member name="M:MSProfessionals.API.Controllers.ServiceController.Get(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of services
            </summary>
            <param name="pageNumber">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 10)</param>
            <param name="name">Optional name filter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of services</returns>
            <response code="200">Returns the paginated list of services</response>
        </member>
        <member name="T:MSProfessionals.API.Controllers.TimeZonesController">
            <summary>
            Controller for managing time zones
            </summary>
        </member>
        <member name="M:MSProfessionals.API.Controllers.TimeZonesController.#ctor(MediatR.IMediator)">
            <summary>
            Initializes a new instance of the TimeZonesController
            </summary>
            <param name="mediator">Mediator for handling commands</param>
        </member>
        <member name="M:MSProfessionals.API.Controllers.TimeZonesController.GetTimeZones(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of time zones ordered by description
            </summary>
            <param name="pageNumber">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 10)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of time zones</returns>
        </member>
        <member name="M:MSProfessionals.API.Controllers.TimeZonesController.GetTimeZonesByDescription(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets a paginated list of time zones filtered by description
            </summary>
            <param name="description">Description to filter by</param>
            <param name="pageNumber">Page number (default: 1)</param>
            <param name="pageSize">Page size (default: 10)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of filtered time zones</returns>
        </member>
        <member name="T:MSProfessionals.API.Middleware.ExceptionMiddleware">
            <summary>
            Middleware to handle exceptions globally
            </summary>
        </member>
        <member name="M:MSProfessionals.API.Middleware.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Initializes a new instance of the ExceptionMiddleware
            </summary>
            <param name="next">Request delegate</param>
        </member>
        <member name="M:MSProfessionals.API.Middleware.ExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invokes the middleware
            </summary>
            <param name="context">HTTP context</param>
        </member>
    </members>
</doc>
